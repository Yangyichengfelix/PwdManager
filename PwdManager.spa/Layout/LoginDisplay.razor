@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Diagnostics.CodeAnalysis
@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthorizationService
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        @context.User.Identity?.Name

        <MudIconButton Color="MudBlazor.Color.Info" Icon="@Icons.Material.Filled.Logout" Title="Logout" OnClick="@(()=>BeginLogOut())" />
    </Authorized>
    <NotAuthorized>
        <MudIconButton Color="MudBlazor.Color.Info" Icon="@Icons.Custom.Brands.MicrosoftAzureDevOps" Title="Login" OnClick="@(()=>BeginLogIn())" />

    </NotAuthorized>
</AuthorizeView>

@code{
    public void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
    public void BeginLogIn()
    {
        Navigation.NavigateToLogout("authentication/login");
    }
    [CascadingParameter, NotNull]

    private Task<AuthenticationState>? AuthenticationState { get; set; } 

    public ClaimsPrincipal AuthenticatedUser { get; set; } = new();
    public AccessToken AccessToken { get; set; } = new();
    private MudTextField<string> keyGenReference =new MudTextField<string>();

    protected override async Task OnParametersSetAsync()
    {
        //await base.OnInitializedAsync();
        try
        {
            var state = await AuthenticationState??throw new Exception("auth state null");
            var accessTokenResult = await AuthorizationService.RequestAccessToken();


            if (!accessTokenResult.TryGetToken(out var token))
            {
                await SignOutManager.SetSignOutState();
                Navigation.NavigateTo("authentication/login");
                //throw new InvalidOperationException("Failed to provision the access token.");
            }
        }
        catch (Exception)
        {

            throw;
        }


        //AccessToken = token;

    }
    protected IDictionary<string, object> GetAccessTokenClaims()
    {
        if (AccessToken == null)
        {
            return new Dictionary<string, object>();
        }

        // header.payload.signature
        var payload = AccessToken.Value.Split(".")[1];
        var base64Payload = payload.Replace('-', '+').Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');
        byte[] result = Convert.FromBase64String(base64Payload);

        var response= JsonSerializer.Deserialize<IDictionary<string, object>>(result);
        if (response==null)
        {
            return new Dictionary<string, object>();

        }
        return response;
    }
}
