@using Grpc.Core
@using Grpc.Net.Client
@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<MudPaper Class="pa-4 mud-height-full">
    <MudText Typo="Typo.subtitle2">@($"Vault Operations ({vaultOperations.Length})")</MudText>
    @foreach (var op in vaultOperations)
    {
        <MudText Color="@MudBlazor.Color.Error">@op</MudText>
    }
</MudPaper>

@code {
    [Inject] GrpcChannel? Channel1 { get; set; }
    [Inject] GrpcChannel? Channel2 { get; set; }
    [Inject, NotNull]
    private IAccessTokenProvider? _AuthorizationService { get; set; }
    private CancellationTokenSource? cts;
    private Metadata headers { get; set; } = new Metadata();
    string[] vaultOperations = { };
    string[] entryOperations = { };
    List<string> vaultOps = new List<string>();
    List<string> entryOps = new List<string>();
    protected override async Task OnParametersSetAsync()
    {
        cts = new CancellationTokenSource();
        headers.Add("test", "test value");
        AccessTokenResult? accessTokenResult = await _AuthorizationService.RequestAccessToken();
        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException("Failed to provision the access token.");
        }
        AccessToken? AccessToken = token;
        headers.Add("Authorization", $"Bearer {AccessToken.Value}");
        var client1 = new Notification.Notificationer.NotificationerClient(Channel1);
        var client2 = new Notification.Notificationer.NotificationerClient(Channel2);
        using var callEntry = client1.GetEntryNotifications(new Google.Protobuf.WellKnownTypes.Empty(), cancellationToken: cts.Token);
        using var callVault = client2.GetVaultNotifications(new Google.Protobuf.WellKnownTypes.Empty(), headers, cancellationToken: cts.Token);
        try
        {
            await foreach (var message in callVault.ResponseStream.ReadAllAsync())
            {
                System.Console.WriteLine(message.Data);

                var text = $"{message.Data.AzureId} {message.Data.Operation} {message.Data.CoffreName} at {message.Data.Timeofaction}";
                vaultOps.Add(text);
                vaultOperations = vaultOps.ToArray();
                await InvokeAsync(StateHasChanged);

            }
        }
        catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
        {
            // Ignore exception from cancellation
        }

    }

    private void StopCount()
    {
        cts?.Cancel();
        cts = null;
    }
}
